#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
    tags = []
    @items.each do |item|
        item[:created_at] = item[:mtime]
        unless item[:tags].nil?
            tags = tags + item[:tags]
        end
    end
    tags = tags.uniq!
    tags.each do |t|
        @items << Nanoc::Item.new("", { :title =>  "Tag: #{t}", :tag => t }, "/tags/#{t}")
    end
end

compile '/' do
    filter :kramdown
    layout 'home'
end

compile '404' do
end

compile 'google*' do
end

compile '/tags/*/' do
  layout 'tags'
end

compile '/sass/style*/' do
  filter :sass, syntax: :scss
end

compile '/sass/*/' do
end

compile '/rss/' do
  filter :erb
end

compile '*' do
  if (item[:extension] == ('css' || 'js' || 'html'))
    # don’t filter sjs, tylesheets and html
  elsif item.binary?
    # don’t filter binary items
  else
    filter :kramdown
    filter :colorize_syntax,
           :default_colorizer => :coderay,
           :outside_pre => true
    filter :cite
    layout 'layout'
  end
end

route '404' do
    item.identifier.chop + '.html'
end

route 'google*' do
    item.identifier.chop + '.html'
end

route '/' do
    item.identifier + 'index'
end

route '/js/*' do
  if item[:extension] == 'js' || 'min.js'
    item.identifier.chop + '.' + item[:extension]
  end
end

route '/sass/style*/' do
  '/css' + item.identifier.chop.gsub(/\/sass/, '') + '.' + 'css'
end

route '/sass/*/' do
end

route '/rss/' do
  '/rss.xml'
end

route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    # item.identifier + 'index.html'
    item.identifier.chop
  end
end

layout '*', :haml
